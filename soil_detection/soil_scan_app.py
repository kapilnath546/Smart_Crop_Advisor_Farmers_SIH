import streamlit as st
import google.generativeai as genai
import os
from dotenv import load_dotenv
from PIL import Image
import io

# -----------------------------
# Load environment variables
# -----------------------------
load_dotenv("soil.env")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

if not GEMINI_API_KEY:
    st.error("‚ùå Gemini API key not found. Please set it in soil.env.")
    st.stop()

# -----------------------------
# Configure Gemini API
# -----------------------------
genai.configure(api_key=GEMINI_API_KEY)
# Updated to stable model (as of Sept 2025)
model = genai.GenerativeModel(
    "gemini-2.5-flash",
    safety_settings={
        "HARM_CATEGORY_HARASSMENT": "BLOCK_MEDIUM_AND_ABOVE",
        "HARM_CATEGORY_HATE_SPEECH": "BLOCK_MEDIUM_AND_ABOVE",
    }
)

# -----------------------------
# Detect soil type using Gemini (unified for image or qualitative/params)
# -----------------------------
def detect_soil_type(image_bytes=None, soil_description=None):
    if soil_description is None:
        return None

    try:
        # Base prompt for soil classification
        base_prompt = f"""
        You are an expert agronomist. Classify the soil strictly as one of:
        - Black Soil
        - Red Soil
        - Clay Soil
        - Sandy Soil

        Soil description: {soil_description}
        """

        if image_bytes:
            # For image: Analyze visually, refined by description
            base_prompt = """
            You are an expert agronomist. Analyze the soil image step-by-step:
            1. Describe the color, texture, and any visible particles (e.g., gritty, sticky).
            2. Consider the additional description if provided.
            3. Classify strictly as one of: Black Soil, Red Soil, Clay Soil, Sandy Soil.
            Respond with only the soil type name (e.g., "Black Soil").
            """ + "\n\n" + base_prompt if soil_description else base_prompt
            image = Image.open(io.BytesIO(image_bytes))
            content = [base_prompt, image]
        else:
            # For description only: Infer from qualitative data
            base_prompt += "\n\nBased on this description, respond with only the soil type name."
            content = [base_prompt]

        response = model.generate_content(
            content,
            generation_config={"temperature": 0.1}
        )

        # Parse response more robustly
        soil_type = response.text.strip()
        if soil_type not in ["Black Soil", "Red Soil", "Clay Soil", "Sandy Soil"]:
            soil_type = "Unknown (check inputs)"
        return soil_type

    except Exception as e:
        st.error(f"‚ùå Error detecting soil: {e}")
        return None

# -----------------------------
# Recommend crops using Gemini
# -----------------------------
def recommend_crops(soil_type, soil_description, manual_params):
    try:
        location = manual_params['location']
        area = manual_params['area']
        prompt = f"""
        You are an expert in agriculture and economics. Based on the following:
        - Soil type: {soil_type}
        - Soil description: {soil_description}
        - Temperature: {manual_params['temp']}¬∞C
        - Humidity: {manual_params['humidity']}%
        - Nitrogen (N): {manual_params['nitrogen']} kg/ha
        - Phosphorus (P): {manual_params['phosphorus']} kg/ha
        - Potassium (K): {manual_params['potassium']} kg/ha
        - Location: {location}
        - Area: {area} acres

        Recommend the top 3 crops that would maximize profit in this location. Consider:
        - Suitability to soil, climate, and nutrient levels.
        - Local market demand, current prices, and yield potential.
        - Estimated profit per acre (in USD, based on average data).
        - Total profit for {area} acres.
        - Reasons for each recommendation.
        - Any risks or tips.

        Format response as:
        1. Crop Name: [Name]
           - Suitability: [Brief]
           - Estimated Yield: [Amount per acre]
           - Market Price: [Price per unit]
           - Profit per Acre: [Estimate USD]
           - Total Profit ({area} acres): [Estimate USD]
           - Reasons: [Details]
        2. ...
        """

        response = model.generate_content(
            prompt,
            generation_config={"temperature": 0.5}  # Allow some creativity for estimates
        )

        return response.text.strip()

    except Exception as e:
        st.error(f"‚ùå Error recommending crops: {e}")
        return None

# -----------------------------
# Streamlit UI
# -----------------------------
st.set_page_config(page_title="Soil Type Detector & Crop Recommender", layout="centered")
st.markdown("<h1 style='text-align: center; color: darkgreen;'>üå± Soil Type Detector & Crop Recommender</h1>", unsafe_allow_html=True)
st.markdown("<p style='text-align: center; color: darkblue;'>Upload a soil image or describe your soil to detect type and get profitable crop recommendations.</p>", unsafe_allow_html=True)

col1, col2 = st.columns(2)

# -----------------------------
# Image Upload Column
# -----------------------------
with col1:
    st.subheader("Upload soil image (optional) / ‡®Æ‡®ø‡©±‡®ü‡©Ä ‡®¶‡©Ä ‡®§‡®∏‡®µ‡©Ä‡®∞ ‡®Ö‡®™‡®≤‡©ã‡®° ‡®ï‡®∞‡©ã (‡®µ‡®ø‡®ï‡®≤‡®™‡®ø‡®ï)")
    image_source = st.file_uploader("Drag and drop file here / ‡®´‡®æ‡®à‡®≤ ‡®á‡©±‡®•‡©á ‡®ñ‡®ø‡©±‡®ö‡©ã ‡®Ö‡®§‡©á ‡®õ‡©±‡®°‡©ã", type=["jpg", "jpeg", "png"])
    image_bytes = None
    if image_source:
        image_bytes = image_source.read()  # Read once
        image = Image.open(io.BytesIO(image_bytes))
        st.image(image, caption="Uploaded Soil Image / ‡®Ö‡®™‡®≤‡©ã‡®° ‡®ï‡©Ä‡®§‡©Ä ‡®Æ‡®ø‡©±‡®ü‡©Ä ‡®¶‡©Ä ‡®§‡®∏‡®µ‡©Ä‡®∞", use_container_width=True)

# -----------------------------
# Soil Description Column
# -----------------------------
with col2:
    st.subheader("Describe your soil / ‡®Ü‡®™‡®£‡©Ä ‡®Æ‡®ø‡©±‡®ü‡©Ä ‡®¶‡®æ ‡®µ‡®∞‡®£‡®® ‡®ï‡®∞‡©ã")
    st.markdown("**What does the soil feel like in your hand? / ‡®§‡©Å‡®π‡®æ‡®°‡©á ‡®π‡©±‡®• ‡®µ‡®ø‡©±‡®ö ‡®Æ‡®ø‡©±‡®ü‡©Ä ‡®ï‡®ø‡®µ‡©á‡®Ç ‡®Æ‡®π‡®ø‡®∏‡©Ç‡®∏ ‡®π‡©Å‡©∞‡®¶‡©Ä ‡®π‡©à?**")
    texture_options = {
        "üü§ Loose and sandy (falls apart easily) / ‡®¢‡®ø‡©±‡®≤‡©Ä ‡®Ö‡®§‡©á ‡®∞‡©á‡®§‡®≤‡©Ä (‡®Ü‡®∏‡®æ‡®®‡©Ä ‡®®‡®æ‡®≤ ‡®ü‡©Å‡©±‡®ü ‡®ú‡®æ‡®Ç‡®¶‡©Ä ‡®π‡©à)": "loose gritty sandy",
        "üü† Smooth like powder (soft, very fine) / ‡®™‡®æ‡®ä‡®°‡®∞ ‡®µ‡®æ‡®Ç‡®ó ‡®∏‡®æ‡®´‡®º (‡®®‡®∞‡®Æ, ‡®¨‡®π‡©Å‡®§ ‡®¨‡®∞‡©Ä‡®ï)": "smooth silky fine silt",
        "‚ö´ Sticky when wet (forms a ball easily) / ‡®ó‡®ø‡©±‡®≤‡©Ä ‡®π‡©ã‡®£ '‡®§‡©á ‡®ö‡®ø‡®™‡®ö‡®ø‡®™‡©Ä (‡®Ü‡®∏‡®æ‡®®‡©Ä ‡®®‡®æ‡®≤ ‡®ó‡©á‡®Ç‡®¶ ‡®¨‡®£‡®æ‡®â‡®Ç‡®¶‡©Ä ‡®π‡©à)": "sticky plastic clay",
        "‚ö™ Mix of all (gritty + smooth + sticky) / ‡®∏‡®æ‡®∞‡©á ‡®Æ‡®ø‡®≤‡©á-‡®ú‡©Å‡®≤‡©á (‡®∞‡©á‡®§‡®≤‡®æ + ‡®∏‡®æ‡®´‡®º + ‡®ö‡®ø‡®™‡®ö‡®ø‡®™‡®æ)": "mixed loam balanced"
    }
    texture = st.radio("", list(texture_options.keys()), index=0)
    
    st.markdown("**How wet is the soil right now? / ‡®Æ‡®ø‡©±‡®ü‡©Ä ‡®á‡®∏ ‡®µ‡©á‡®≤‡©á ‡®ï‡®ø‡©∞‡®®‡©Ä ‡®ó‡®ø‡©±‡®≤‡©Ä ‡®π‡©à?**")
    moisture_options = {
        "üíß Very wet (waterlogged, shiny) / ‡®¨‡®π‡©Å‡®§ ‡®ú‡®º‡®ø‡®Ü‡®¶‡®æ ‡®ó‡®ø‡©±‡®≤‡©Ä (‡®™‡®æ‡®£‡©Ä ‡®®‡®æ‡®≤ ‡®≠‡®∞‡©Ä ‡®π‡©ã‡®à, ‡®ö‡®Æ‡®ï‡®¶‡®æ‡®∞)": "very wet waterlogged",
        "üå´ Moist (damp but not dripping) / ‡®®‡®Æ‡©Ä ‡®µ‡®æ‡®≤‡©Ä (‡®≠‡®ø‡©±‡®ú‡©Ä ‡®™‡®∞ ‡®ü‡®™‡®ï‡®¶‡©Ä ‡®®‡®π‡©Ä‡®Ç)": "moist damp",
        "üå± Slightly dry (crumbles but holds shape) / ‡®•‡©ã‡©ú‡©ç‡®π‡©Ä ‡®∏‡©Å‡©±‡®ï‡©Ä (‡®ü‡©Å‡©±‡®ü‡®¶‡©Ä ‡®π‡©à ‡®™‡®∞ ‡®Ü‡®ï‡®æ‡®∞ ‡®¨‡®£‡®æ‡®à ‡®∞‡©±‡®ñ‡®¶‡©Ä ‡®π‡©à)": "slightly dry friable",
        "üèú Very dry (completely dusty) / ‡®¨‡®π‡©Å‡®§ ‡®∏‡©Å‡©±‡®ï‡©Ä (‡®™‡©Ç‡®∞‡©Ä ‡®§‡®∞‡©ç‡®π‡®æ‡®Ç ‡®ß‡©Ç‡©ú ‡®µ‡®æ‡®≤‡©Ä)": "very dry dusty"
    }
    moisture = st.radio("", list(moisture_options.keys()), index=1)
    
    st.markdown("**What is the color of the soil? / ‡®Æ‡®ø‡©±‡®ü‡©Ä ‡®¶‡®æ ‡®∞‡©∞‡®ó ‡®ï‡©Ä ‡®π‡©à?**")
    color_options = {
        "üü§ Dark brown / black (rich color) / ‡®ó‡©Ç‡©ú‡©ç‡®π‡®æ ‡®≠‡©Ç‡®∞‡®æ / ‡®ï‡®æ‡®≤‡®æ (‡®ß‡®®‡®æ‡®¢ ‡®∞‡©∞‡®ó)": "dark brown black organic rich",
        "üü† Red or reddish-brown / ‡®≤‡®æ‡®≤ ‡®ú‡®æ‡®Ç ‡®≤‡®æ‡®≤-‡®≠‡©Ç‡®∞‡®æ": "red reddish-brown iron oxide",
        "üü° Yellowish or light brown / ‡®™‡©Ä‡®≤‡®æ ‡®ú‡®ø‡®π‡®æ ‡®ú‡®æ‡®Ç ‡®π‡®≤‡®ï‡®æ ‡®≠‡©Ç‡®∞‡®æ": "yellowish light brown leached",
        "‚ö™ Grayish / whitish / ‡®ß‡©Ç‡®∏‡®∞ ‡®ú‡®æ‡®Ç ‡®ö‡®ø‡©±‡®ü‡®æ": "grayish whitish poor drainage"
    }
    color = st.radio("", list(color_options.keys()), index=0)
    
    st.markdown("**How hard is it to dig the soil? / ‡®Æ‡®ø‡©±‡®ü‡©Ä ‡®ñ‡©ã‡®¶‡®£ ‡®µ‡®ø‡©±‡®ö ‡®ï‡®ø‡©∞‡®®‡©Ä ‡®∏‡®ñ‡®º‡®§ ‡®π‡©à?**")
    hardness_options = {
        "ü™± Very soft (easy to dig by hand) / ‡®¨‡®π‡©Å‡®§ ‡®®‡®∞‡®Æ (‡®π‡©±‡®• ‡®®‡®æ‡®≤ ‡®Ü‡®∏‡®æ‡®®‡©Ä ‡®®‡®æ‡®≤ ‡®ñ‡©ã‡®¶‡©Ä ‡®ú‡®æ ‡®∏‡®ï‡®¶‡©Ä ‡®π‡©à)": "very soft loose",
        "üåæ Medium (needs some effort) / ‡®¶‡®∞‡®Æ‡®ø‡®Ü‡®®‡®æ (‡®•‡©ã‡©ú‡©ç‡®π‡©Ä ‡®Æ‡®ø‡®π‡®®‡®§ ‡®≤‡©±‡®ó‡®¶‡©Ä ‡®π‡©à)": "medium firm",
        "üß± Hard (needs tools, dry clods) / ‡®∏‡®ñ‡®º‡®§ (‡®â‡®™‡®ï‡®∞‡®®‡®æ‡®Ç ‡®¶‡©Ä ‡®≤‡©ã‡©ú, ‡®∏‡©Å‡©±‡®ï‡©á ‡®ó‡©±‡®†‡©á)": "hard cloddy compacted",
        "ü™® Very hard / rocky / ‡®¨‡®π‡©Å‡®§ ‡®∏‡®ñ‡®º‡®§ / ‡®™‡©±‡®•‡®∞‡©Ä‡®≤‡©Ä": "very hard rocky"
    }
    hardness = st.radio("", list(hardness_options.keys()), index=1)
    
    st.markdown("**When you pour water, what happens? / ‡®ú‡®¶‡©ã‡®Ç ‡®§‡©Å‡®∏‡©Ä‡®Ç ‡®™‡®æ‡®£‡©Ä ‡®™‡®æ‡®â‡®Ç‡®¶‡©á ‡®π‡©ã, ‡®ï‡©Ä ‡®π‡©Å‡©∞‡®¶‡®æ ‡®π‡©à?**")
    drainage_options = {
        "üí® Drains very fast (water disappears quickly) / ‡®¨‡®π‡©Å‡®§ ‡®§‡©á‡®ú‡®º ‡®®‡®ø‡®ï‡®æ‡®∏ (‡®™‡®æ‡®£‡©Ä ‡®ú‡®≤‡®¶‡©Ä ‡®ó‡®æ‡®á‡®¨ ‡®π‡©ã ‡®ú‡®æ‡®Ç‡®¶‡®æ ‡®π‡©à)": "drains very fast porous",
        "üíß Drains slowly (takes time but no standing water) / ‡®π‡©å‡®≤‡©Ä ‡®®‡®ø‡®ï‡®æ‡®∏ (‡®∏‡®Æ‡®æ‡®Ç ‡®≤‡©à‡®Ç‡®¶‡®æ ‡®π‡©à ‡®™‡®∞ ‡®™‡®æ‡®£‡©Ä ‡®ñ‡©ú‡®æ ‡®®‡®π‡©Ä‡®Ç ‡®π‡©Å‡©∞‡®¶‡®æ)": "drains slowly moderate",
        "ü™£ Stays on top (water forms puddle) / ‡®â‡©±‡®™‡®∞ ‡®∞‡®π‡®ø‡©∞‡®¶‡®æ ‡®π‡©à (‡®™‡®æ‡®£‡©Ä ‡®ú‡®Æ ‡®ú‡®æ‡®Ç‡®¶‡®æ ‡®π‡©à)": "stays on top impermeable",
        "üåÄ Forms cracks after drying / ‡®∏‡©Å‡©±‡®ï‡®£ ‡®§‡©ã‡®Ç ‡®¨‡®æ‡®Ö‡®¶ ‡®¶‡®∞‡®æ‡®∞‡®æ‡®Ç ‡®¨‡®£‡®¶‡©Ä‡®Ü‡®Ç ‡®π‡®®": "forms cracks shrink-swell"
    }
    drainage = st.radio("", list(drainage_options.keys()), index=1)

    soil_description = f"Texture: {texture_options[texture]}; Moisture: {moisture_options[moisture]}; Color: {color_options[color]}; Hardness: {hardness_options[hardness]}; Drainage: {drainage_options[drainage]}"

# -----------------------------
# Additional Farm Details
# -----------------------------
st.subheader("Additional farm details / ‡®π‡©ã‡®∞ ‡®ñ‡©á‡®§‡©Ä‡®¨‡®æ‡©ú‡©Ä ‡®µ‡©á‡®∞‡®µ‡©á")
temp = st.number_input("Temperature (¬∞C) / ‡®§‡®æ‡®™‡®Æ‡®æ‡®® (¬∞C)", value=25.0, min_value=-10.0, max_value=50.0, step=0.1)
humidity = st.number_input("Humidity (%) / ‡®®‡®Æ‡©Ä (%)", value=70.0, min_value=0.0, max_value=100.0, step=0.1)
nitrogen = st.number_input("Nitrogen (N) (kg/ha) / ‡®®‡®æ‡®à‡®ü‡©ç‡®∞‡©ã‡®ú‡®® (N) (‡®ï‡®ø‡®≤‡©ã‡®ó‡©ç‡®∞‡®æ‡®Æ/‡®π‡©à‡®ï‡®ü‡©á‡®Ö‡®∞)", value=30, min_value=0, step=1)
potassium = st.number_input("Potassium (K) (kg/ha) / ‡®™‡©ã‡®ü‡©à‡®∏‡®º‡©Ä‡®Ö‡®Æ (K) (‡®ï‡®ø‡®≤‡©ã‡®ó‡©ç‡®∞‡®æ‡®Æ/‡®π‡©à‡®ï‡®ü‡©á‡®Ö‡®∞)", value=30, min_value=0, step=1)
phosphorus = st.number_input("Phosphorus (P) (kg/ha) / ‡®´‡®æ‡®∏‡®´‡©ã‡®∞‡®∏ (P) (‡®ï‡®ø‡®≤‡©ã‡®ó‡©ç‡®∞‡®æ‡®Æ/‡®π‡©à‡®ï‡®ü‡©á‡®Ö‡®∞)", value=10, min_value=0, step=1)
location = st.text_input("Location (e.g., city, country) / ‡®∏‡®•‡®æ‡®® (‡®ú‡®ø‡®µ‡©á‡®Ç ‡®ï‡®ø ‡®∏‡®º‡®π‡®ø‡®∞, ‡®¶‡©á‡®∏‡®º)", value="California, USA")
area = st.number_input("Area (acres) / ‡®ñ‡©á‡®§‡®∞‡®´‡®≤ (‡®è‡®ï‡©ú)", value=1.0, min_value=0.1, step=0.1)

manual_params = {
    'temp': temp, 'humidity': humidity,
    'nitrogen': nitrogen, 'potassium': potassium, 'phosphorus': phosphorus,
    'location': location, 'area': area
}

# -----------------------------
# Determine soil type
# -----------------------------
detected_soil = None
analysis_method = ""

# Analysis button
run_analysis = st.button("Analyze Soil & Recommend Crops / ‡®Æ‡®ø‡©±‡®ü‡©Ä ‡®¶‡®æ ‡®µ‡®ø‡®∏‡®º‡®≤‡©á‡®∏‡®º‡®£ ‡®ï‡®∞‡©ã ‡®Ö‡®§‡©á ‡®´‡®∏‡®≤‡®æ‡®Ç ‡®¶‡©Ä ‡®∏‡®ø‡®´‡®æ‡®∞‡®∏‡®º ‡®ï‡®∞‡©ã")
use_desc_for_image = st.checkbox("Refine image analysis with soil description? / ‡®Æ‡®ø‡©±‡®ü‡©Ä ‡®¶‡©á ‡®µ‡®∞‡®£‡®® ‡®®‡®æ‡®≤ ‡®§‡®∏‡®µ‡©Ä‡®∞ ‡®µ‡®ø‡®∏‡®º‡®≤‡©á‡®∏‡®º‡®£ ‡®®‡©Ç‡©∞ ‡®∏‡©Å‡®ß‡®æ‡®∞‡©ã?", value=True) if image_source else False

if run_analysis:
    desc_to_use = soil_description if use_desc_for_image else None
    if image_source:
        analysis_method = "Image / ‡®§‡®∏‡®µ‡©Ä‡®∞"
    else:
        analysis_method = "Soil description / ‡®Æ‡®ø‡©±‡®ü‡©Ä ‡®¶‡®æ ‡®µ‡®∞‡®£‡®®"
    
    with st.spinner("Detecting soil type with Gemini... / Gemini ‡®®‡®æ‡®≤ ‡®Æ‡®ø‡©±‡®ü‡©Ä ‡®¶‡©Ä ‡®ï‡®ø‡®∏‡®Æ ‡®™‡®§‡®æ ‡®≤‡®ó‡®æ‡®à ‡®ú‡®æ ‡®∞‡®π‡©Ä ‡®π‡©à..."):
        detected_soil = detect_soil_type(image_bytes if image_source else None, desc_to_use)
        if detected_soil:
            analysis_method += " (AI-powered / AI-‡®ö‡®≤‡®ø‡®§)"

# -----------------------------
# Display Soil Results and Crop Recommendations
# -----------------------------
if detected_soil:
    st.success(f"‚úÖ Detected Soil Type: **{detected_soil}** (via {analysis_method}) / ‡®™‡®§‡®æ ‡®≤‡©±‡®ó‡©Ä ‡®Æ‡®ø‡©±‡®ü‡©Ä ‡®¶‡©Ä ‡®ï‡®ø‡®∏‡®Æ: **{detected_soil}** ({analysis_method} ‡®∞‡®æ‡®π‡©Ä‡®Ç)")
    
    with st.spinner("Recommending profitable crops with Gemini... / Gemini ‡®®‡®æ‡®≤ ‡®≤‡®æ‡®≠‡®¶‡®æ‡®á‡®ï ‡®´‡®∏‡®≤‡®æ‡®Ç ‡®¶‡©Ä ‡®∏‡®ø‡®´‡®æ‡®∞‡®∏‡®º ‡®ï‡©Ä‡®§‡©Ä ‡®ú‡®æ ‡®∞‡®π‡©Ä ‡®π‡©à..."):
        crop_recommendations = recommend_crops(detected_soil, soil_description, manual_params)
    
    if crop_recommendations:
        st.markdown("### üåæ Recommended Crops for Maximum Profit / ‡®µ‡©±‡®ß ‡®§‡©ã‡®Ç ‡®µ‡©±‡®ß ‡®≤‡®æ‡®≠ ‡®≤‡®à ‡®∏‡®ø‡®´‡®æ‡®∞‡®∏‡®º ‡®ï‡©Ä‡®§‡©Ä‡®Ü‡®Ç ‡®´‡®∏‡®≤‡®æ‡®Ç")
        # Show English first, then Punjabi
        st.markdown("**English:**")
        st.markdown(crop_recommendations)
        st.markdown("---")
        st.markdown("**‡®™‡©∞‡®ú‡®æ‡®¨‡©Ä:**")
        # Request Gemini to translate the crop recommendations to Punjabi
        try:
            translation_prompt = f"Translate the following agricultural crop recommendations into Punjabi, preserving formatting and details:\n\n{crop_recommendations}"
            translation_response = model.generate_content(
                translation_prompt,
                generation_config={"temperature": 0.3}
            )
            punjabi_text = translation_response.text.strip()
            st.markdown(punjabi_text)
        except Exception as e:
            st.error(f"‚ùå Error translating recommendations: {e}")
            st.info("Punjabi translation is currently unavailable.")
    
    st.info("üí° *Note: Estimates are AI-generated based on general data. Check local markets and consult experts for accuracy.* / *‡®®‡©ã‡®ü: ‡®Ö‡©∞‡®¶‡®æ‡®ú‡®º‡©á ‡®Ü‡®Æ ‡®°‡©á‡®ü‡®æ '‡®§‡©á ‡®Ü‡®ß‡®æ‡®∞‡®ø‡®§ AI ‡®¶‡©Å‡®Ü‡®∞‡®æ ‡®¨‡®£‡®æ‡®è ‡®ó‡®è ‡®π‡®®‡•§ ‡®∏‡®•‡®æ‡®®‡®ï ‡®¨‡®æ‡®ú‡®º‡®æ‡®∞‡®æ‡®Ç ‡®¶‡©Ä ‡®ú‡®æ‡®Ç‡®ö ‡®ï‡®∞‡©ã ‡®Ö‡®§‡©á ‡®∏‡®π‡©Ä ‡®ú‡®æ‡®£‡®ï‡®æ‡®∞‡©Ä ‡®≤‡®à ‡®Æ‡®æ‡®π‡®ø‡®∞‡®æ‡®Ç ‡®®‡®æ‡®≤ ‡®∏‡®≤‡®æ‡®π-‡®Æ‡®∏‡®º‡®µ‡®∞‡®æ ‡®ï‡®∞‡©ã‡•§*")
else:
    st.info("üëÜ Describe your soil and enter details, then click 'Analyze' to get started! (Image optional.) / üëÜ ‡®Ü‡®™‡®£‡©Ä ‡®Æ‡®ø‡©±‡®ü‡©Ä ‡®¶‡®æ ‡®µ‡®∞‡®£‡®® ‡®ï‡®∞‡©ã ‡®Ö‡®§‡©á ‡®µ‡©á‡®∞‡®µ‡©á ‡®≠‡®∞‡©ã, ‡®´‡®ø‡®∞ '‡®µ‡®ø‡®∏‡®º‡®≤‡©á‡®∏‡®º‡®£ ‡®ï‡®∞‡©ã' '‡®§‡©á ‡®ï‡®≤‡®ø‡©±‡®ï ‡®ï‡®∞‡©ã! (‡®§‡®∏‡®µ‡©Ä‡®∞ ‡®µ‡®ø‡®ï‡®≤‡®™‡®ø‡®ï ‡®π‡©à‡•§)")
